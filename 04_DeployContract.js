
const { Console } = require('console');
const Web3 = require('web3');  //import web3 library 

const rpcUrl = "https://rinkeby.infura.io/v3/0293dd4d29544a01aa5b8a2198039eec";  // process.env.INFURA_MAINNET_URL get particular address from .env file

const web3 = new Web3(rpcUrl);  //now web is the instance now we call each function of web3 using WEB3

const TX = require("ethereumjs-tx").Transaction;

const Owners_Account = '0x9803CC075d4520f8Ea76201893EE133DAeA55B47';
const Owners_private_key = Buffer.from("52bee26900c3fbd19bc1af7616c0292825ea349e3ab49fb6b6262da561003e00","hex");

const ContractByteCode = '608060405260008060006101000a81548160ff021916908360ff16021790555034801561002b57600080fd5b5061038d8061003b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806320ed8b8914610046578063648b7ce8146100505780638ada066e1461005a575b600080fd5b61004e610078565b005b610058610106565b005b610062610193565b60405161006f91906101c5565b60405180910390f35b60008060009054906101000a900460ff1660ff1610156100cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c49061023d565b60405180910390fd5b60008081819054906101000a900460ff16809291906100eb90610299565b91906101000a81548160ff021916908360ff16021790555050565b60ff60008054906101000a900460ff1660ff16111561015a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101519061030e565b60405180910390fd5b60008081819054906101000a900460ff16809291906101789061032e565b91906101000a81548160ff021916908360ff16021790555050565b60008060009054906101000a900460ff1660ff16905090565b6000819050919050565b6101bf816101ac565b82525050565b60006020820190506101da60008301846101b6565b92915050565b600082825260208201905092915050565b7f436f756e7465722063616e6e6f742062656c6f77207468616e20300000000000600082015250565b6000610227601b836101e0565b9150610232826101f1565b602082019050919050565b600060208201905081810360008301526102568161021a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b60006102a48261028c565b9150600082036102b7576102b661025d565b5b600182039050919050565b7f436f756e7465722063616e6e6f74206578636565647320323535000000000000600082015250565b60006102f8601a836101e0565b9150610303826102c2565b602082019050919050565b60006020820190508181036000830152610327816102eb565b9050919050565b60006103398261028c565b915060ff820361034c5761034b61025d565b5b60018201905091905056fea26469706673582212205d467a487d1c05caee6d1003dc22c83eae46bb16a87cc8bcac3fd6a1ed27ccf364736f6c634300080e0033';

const ContractByteCodeToHEX = Buffer.from(ContractByteCode,"hex");

const Deploy_Contract = async ()=>{
    try {
        const txNonce =await web3.eth.getTransactionCount(Owners_Account); //gets the nonce of previous transaction of senders address

          const txObj={
              nonce : web3.utils.toHex(txNonce),        
              gasLimit : web3.utils.toHex(1000000),//max gas consumed by the transaction it always consumed 21000
              gasPrice : web3.utils.toHex(web3.utils.toWei('10','gwei')),// this is the amount we want to pay for each unit of gas. I'll use 10 Gwei here
              data : ContractByteCodeToHEX
            }

          const tx = new TX(txObj,{'chain':'rinkeby'}); // transafer all the details to another variable
          tx.sign(Owners_private_key); // here we sign our transaction with the private key 

          const serializedTx = tx.serialize();  //here we serialize the transaction so we transafer it to web3

          const raw = '0x'+ serializedTx.toString('hex'); // here first we convert convert serialize tx to string and then transfer it to a variable

          const response =await web3.eth.sendSignedTransaction(raw); // now assign the while transaction to the variable so we can get transaction address

          console.log("hash is :" ,response);
            

    } catch (e) {

        console.log("Error is : ",e);
        
    }
}

Deploy_Contract();